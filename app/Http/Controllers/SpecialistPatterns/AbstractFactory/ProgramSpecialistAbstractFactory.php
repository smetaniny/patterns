<?php

namespace App\Http\Controllers\SpecialistPatterns\AbstractFactory;

use App\Http\Controllers\SpecialistPatterns\AbstractFactory\Factories\StoneHouseFactory;
use App\Http\Controllers\SpecialistPatterns\AbstractFactory\Factories\WoodHouseFactory;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Log;

/**
 * Паттерн "Абстрактная фабрика" (Abstract Factory) используется для создания семейств связанных или зависимых объектов
 * без указания их конкретных классов. В разработке интернет-магазина ювелирных изделий на Laravel, "Абстрактная
 * фабрика" может быть полезной в следующих логических случаях:
 *
 * Создание продуктов разных категорий: Если ваш магазин предлагает разные категории ювелирных изделий (например,
 * кольца, ожерелья, часы), и каждая категория имеет свои уникальные свойства, вы можете использовать "Абстрактную
 * фабрику" для создания набора фабрик, каждая из которых создает продукты определенной категории. Это позволит вам
 * создавать продукты разных категорий без необходимости знать их конкретные классы.
 *
 * Интеграция с разными поставщиками: Если ваш интернет-магазин сотрудничает с несколькими поставщиками,
 * каждый из которых предоставляет свои ювелирные изделия с уникальными характеристиками и атрибутами.
 * "Абстрактная фабрика" может быть использована для создания фабрик, каждая из которых связана с конкретным
 * поставщиком. Это упростит интеграцию с разными поставщиками и управление продуктами, предоставляемыми ими.
 *
 * Поддержка разных регионов: Если ваш магазин работает в разных регионах, где могут существовать различные стандарты и
 * требования к ювелирным изделиям,
 * "Абстрактная фабрика" может помочь создавать продукты, соответствующие стандартам конкретного региона.
 *
 * Работа с разными поставками и упаковкой: Если ваш магазин предоставляет разные варианты упаковки и методы доставки,
 * "Абстрактная фабрика" может использоваться для создания фабрик, каждая из которых создает объекты, связанные с
 * определенными методами упаковки и доставки.
 *
 * Множество внешних интеграций: Если ваш интернет-магазин интегрируется с разными сторонними системами, такими как
 * платежные шлюзы, системы учета заказов и другие, "Абстрактная фабрика" может создать абстракцию для создания
 * объектов, связанных с этими интеграциями.
 *
 * Используя "Абстрактную фабрику", вы можете легко создавать семейства объектов, которые соответствуют определенным
 * требованиям или контекстам без необходимости знания конкретных классов. Это способствует гибкости и упрощает
 * поддержку и расширение вашего интернет-магазина.
 */
class ProgramSpecialistAbstractFactory
{
    public static function index()
    {

        Log::channel('info')->info("Это лог с канала 'info'", ['user_id' => 9525,]);
        Log::channel('warning')->warning("Это лог с канала 'warning'", ['user_id' => 9525,]);
        Log::channel('error')->error("Это лог с канала 'error'", ['user_id' => 9525,]);
        Log::channel('debug')->debug("Это лог с канала 'debug'", ['user_id' => 9525,]);

        // Получаем текущую локаль и сравниваем ее с "ru" (необязательно в верхнем регистре)
        if (App::getLocale() == "ru") {
            // Если локаль - русская, создаем фабрику для строительства каменных домов
            $factory = new StoneHouseFactory();
        } else {
            // В противном случае создаем фабрику для строительства деревянных домов
            $factory = new WoodHouseFactory();
        }

        // Создаем стены дома и строим их
        $factory->createWall()->build();

        // Создаем крышу дома, покрываем её и обеспечиваем защиту от воды
        $factory->createRoof()->cover()->waterProtect();

        // Создаем окно, устанавливаем его и открываем
        $factory->createWindow()->install()->open();
    }
}
