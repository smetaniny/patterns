<?php

namespace App\Http\Controllers\SpecialistPatterns\Adapter\AdapterClass;

/**
 * Паттерн "Адаптер" (Adapter) - это структурный паттерн проектирования, который позволяет объектам с несовместимыми
 * интерфейсами работать вместе. Этот паттерн создает адаптер, который преобразует интерфейс одного объекта в
 * интерфейс, ожидаемый другим объектом.
 *
 * Интеграция с внешними системами: Если ваш магазин интегрируется с внешними поставщиками, платежными системами или
 * другими сторонними сервисами, вы можете использовать адаптеры для адаптации интерфейсов этих систем к вашему
 * стандарту. Например, создание адаптера для работы с разными API поставщиков ювелирных изделий, чтобы сделать их
 * данные совместимыми с вашей системой.
 *
 * Обновление или изменение сторонних библиотек: Если вы используете сторонние библиотеки или плагины, и их интерфейс
 * меняется или устаревает, вы можете создать адаптеры, чтобы обеспечить совместимость с вашей системой и избежать
 * необходимости внесения изменений во всем вашем коде.
 *
 * Клиент-серверные взаимодействия: В случае, если ваш магазин взаимодействует с клиентскими приложениями, мобильными
 * приложениями или другими внешними источниками данных, адаптеры могут обеспечить удобство взаимодействия с разными
 * источниками данных и форматами.
 *
 * Локализация и мультиязычность: Если ваш интернет-магазин поддерживает разные языки и локализации, адаптеры могут
 * использоваться для обеспечения правильного отображения и обработки контента в разных языках.
 *
 * Изменение данных и представлений: Адаптеры могут быть использованы для изменения формата данных или представлений.
 * Например, преобразование данных о ювелирных изделиях или изображений в формат, который соответствует вашим
 * требованиям или дизайну сайта.
 *
 * Повышение производительности: Адаптеры могут использоваться для кэширования данных, преобразования запросов или
 * оптимизации работы с базой данных для повышения производительности вашего магазина.
 *
 * Расширение функциональности: Адаптеры могут быть использованы для добавления новых функций или расширения
 * существующей функциональности вашего магазина, не внося изменения в существующий код.
 *
 * Важно помнить, что паттерн "Адаптер" обеспечивает совместимость и интеграцию разных компонентов или интерфейсов, что
 * делает его полезным инструментом для разработки веб-приложений, включая интернет-магазины на Laravel.
 */
class ProgramSpecialistAdapterClass
{
    public function index()
    {
        // Подключение класса USWeatherAdapter

        // Установка русской локали для вывода
        setlocale(LC_ALL, "ru_RU.UTF-8");

        // Создание объекта RussianWeather, предоставляющего информацию о погоде в России
        $service = new RussianWeather();
        // Установка города (Москва)
        $service->setPosition("Москва");
        // $service->setPosition("Санкт-Петербург"); // Можно установить другой город

        echo "Москва<br />";
        echo "Температура (C): " . $service->getTemperature() . "<br />";
        echo "Скорость ветра (м/с): " . $service->getWind() . "<br />";
        echo "Ощущаемая температура (C): " . $service->getFeelsLikeTemperature() . "<br />";

        // Создание объекта USWeatherAdapter, адаптирующего интерфейс для получения погоды в США
        $us_service = new USWeatherAdapter();
        $us_service->setPosition("Нью-Йорк"); // Установка города (Нью-Йорк)
        // $us_service->setPosition("Вашингтон"); // Можно установить другой город

        echo "Нью-Йорк<br />";
        echo "Температура (C): " . $us_service->getTemperature() . "<br />";
        echo "Скорость ветра (м/с): " . $us_service->getWind() . "<br />";
        echo "Ощущаемая температура (C): " . $us_service->getFeelsLikeTemperature() . "<br />";

        // Освобождение памяти
        unset($service);
        unset($us_service);
    }
}







