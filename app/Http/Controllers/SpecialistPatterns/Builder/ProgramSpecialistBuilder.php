<?php

namespace App\Http\Controllers\SpecialistPatterns\Builder;

/**
 * Паттерн "Строитель" (Builder) - это порождающий паттерн проектирования, который используется для создания сложных
 * объектов шаг за шагом. Он позволяет создавать объекты с разнообразными параметрами и опциями, облегчая процесс
 * конструирования объектов и упрощая его читаемость.
 *
 * В разработке ювелирного интернет-магазина на Laravel, паттерн "Строитель" может быть полезен в следующих логических
 * случаях:
 *
 * Создание кастомизированных изделий: Если ваш магазин предоставляет клиентам возможность создавать кастомизированные
 * ювелирные изделия, паттерн "Строитель" может использоваться для пошагового конструирования изделий с учетом
 * выбранных опций (материал, камни, форма, размер и др.).
 *
 * Формирование заказов: При оформлении заказа в интернет-магазине, паттерн "Строитель" может помочь собирать заказы
 * пошагово, добавляя выбранные товары, опции, адрес доставки и другую информацию к заказу.
 *
 * Генерация отчетов и документов: Если ваш магазин генерирует различные отчеты или документы (например, сертификаты о
 * качестве, инструкции по уходу за ювелирными изделиями), "Строитель" может использоваться для создания таких
 * документов с учетом разных параметров и данных.
 *
 * Формирование корзины покупок: Паттерн "Строитель" может применяться для пошагового добавления товаров в корзину
 * покупок, учета количества и опций каждого товара.
 *
 * Создание ювелирных коллекций: Если ваш магазин продает ювелирные коллекции, "Строитель" может быть использован для
 * пошагового создания и управления коллекциями, включая выбор изделий и их внешний вид.
 *
 * Генерация URL и маршрутов: В веб-разработке, "Строитель" может помочь создавать URL и маршруты для разных страниц
 * товаров, категорий и фильтров, учитывая различные параметры.
 *
 * Паттерн "Строитель" позволяет создавать объекты с разнообразными параметрами и опциями, что особенно полезно в
 * контексте интернет-магазина с разнообразным ассортиментом и кастомизацией товаров. Он улучшает читаемость кода,
 * делает процесс создания объектов более гибким и обеспечивает возможность создавать сложные объекты шаг за шагом.
 */
class ProgramSpecialistBuilder
{
    public function index()
    {
        /**
         * Создание экземпляров строителей для разных видов конструкций
         */
        // Строитель для подсчёта стоимости
        $priceBuilder = new PriceBuilder();
        // Строитель для строительства дома
        $houseBuilder = new HouseBuilder();
        // Строитель для документации
        $docBuilder = new DocBuilder();

        /**
         * Создание директоров для разных видов строительства
         */
        // Продавец
        $salesman = new Director($priceBuilder);
        // Прораб
        $foreman = new Director($houseBuilder);
        // Менеджер
        $manager = new Director($docBuilder);

        // Директор продаж заказывает строительство и получает стоимость
        $salesman->make(true);
        $price = $priceBuilder->getResult();
        echo "Результат работы продавца - цена $price<br /> <br />";

        // Директор стройки заказывает строительство и получает дом
        $foreman->make(true);
        $house = $houseBuilder->getResult();
        echo "Результат работы прораба - дом:<br />" . $house . "<br /> <br />";

        // Директор управления документацией заказывает документацию и получает документ
        $manager->make(true);
        $doc = $docBuilder->getResult();
        echo "Результат работы менеджера - документ:<br />" . $doc . "<br />";
    }
}
