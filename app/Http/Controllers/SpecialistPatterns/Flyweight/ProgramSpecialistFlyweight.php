<?php

namespace App\Http\Controllers\SpecialistPatterns\Flyweight;

/**
 * Паттерн "Легковес" (Flyweight) является структурным паттерном проектирования, который используется для эффективного
 * управления большим количеством мелких объектов, разделяя общие данные между ними и снижая использование памяти. Он
 * позволяет уменьшить потребление ресурсов при работе с множеством объектов, которые имеют общие характеристики.
 * Паттерн Flyweight подходит, например, для ситуаций, когда нужно обрабатывать большое количество объектов, каждый из
 * которых потенциально мог бы существовать как отдельный объект, но имеет много общих данных с другими объектами.
 *
 * В контексте разработки интернет-магазина на Laravel, паттерн Flyweight может быть использован в следующих логических
 * случаях:
 *
 * Управление изображениями: В интернет-магазинах часто есть множество изображений, таких как фотографии товаров.
 * Flyweight может использоваться для оптимизации загрузки и хранения изображений, предоставляя общие изображения для
 * всех одинаковых товаров или изображений с одинаковым содержанием.
 *
 * Управление характеристиками товаров: Если у вас есть множество товаров с общими характеристиками (например,
 * одинаковыми размерами, цветами и т. д.), вы можете использовать Flyweight для представления и управления этими
 * общими данными.
 *
 * Управление категориями товаров: В интернет-магазинах товары часто принадлежат к разным категориям, и некоторые
 * категории могут иметь общие характеристики. Flyweight может помочь с разделением и оптимизацией данных для
 * категорий.
 *
 * Кеширование данных: Flyweight может быть использован для кеширования часто используемых данных, таких как информация
 * о товарах, категориях, ценах и других атрибутах, чтобы уменьшить нагрузку на базу данных и улучшить
 * производительность.
 *
 * Управление сеансами пользователей: Если ваш интернет-магазин имеет большое количество пользователей, Flyweight может
 * быть использован для эффективного управления информацией о текущих сеансах пользователей.
 *
 * Паттерн Flyweight помогает сэкономить память и ресурсы, уменьшая издержки при работе с большим количеством данных,
 * которые имеют общие характеристики. Он особенно полезен, когда необходимо оптимизировать производительность и
 * управление данными в приложениях с большими объемами информации, такими как интернет-магазины.
 */
class ProgramSpecialistFlyweight
{
    public function index()
    {
        // Засекаем время перед выполнением задачи
        $startTime = microtime(true);

        // Пример использования Flyweight для категорий товаров
        $categoryFactory = new CategoryFactory();

        // Создаем товары и присваиваем им категории
        $product1 = ['name' => 'Товар 1', 'category' => $categoryFactory->getCategory('Категория A')];
        $product2 = ['name' => 'Товар 2', 'category' => $categoryFactory->getCategory('Категория B')];
        $product3 = ['name' => 'Товар 3', 'category' => $categoryFactory->getCategory('Категория C')];
        $product4 = ['name' => 'Товар 4', 'category' => $categoryFactory->getCategory('Категория D')];

        // Выводим информацию о товарах и их категориях
        echo "Имя: {$product1['name']}, Категория: {$product1['category']->getName()}<br />";
        echo "Имя: {$product2['name']}, Категория: {$product2['category']->getName()}<br />";
        echo "Имя: {$product3['name']}, Категория: {$product3['category']->getName()}<br />";
        echo "Имя: {$product3['name']}, Категория: {$product4['category']->getName()}<br />";

        // Засекаем время после выполнения задачи
        $endTime = microtime(true);

        // Вычисляем время выполнения задачи в миллисекундах
        $executionTime = ($endTime - $startTime) * 1000;

        // Выводим время выполнения задачи
        echo "Время выполнения задачи: {$executionTime} миллисекунд<br />";
    }
}

