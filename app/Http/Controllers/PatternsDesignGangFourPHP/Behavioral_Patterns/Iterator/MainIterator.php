<?php

namespace App\Http\Controllers\PatternsDesignGangFourPHP\Behavioral_Patterns\Iterator;

/**
 * Паттерн Итератор предоставляет способ последовательного доступа к элементам составного объекта
 * без раскрытия его внутреннего представления. Он обеспечивает унифицированный интерфейс
 * для обхода различных структур данных (например, списков, массивов, деревьев) без
 * знания их внутренней реализации.
 *
 * В данном примере используется паттерн Итератор для обхода списка сотрудников и
 * печати информации о них. Создается список сотрудников, к нему добавляются сотрудники,
 * затем создается объект, отвечающий за печать определенного количества сотрудников,
 * и происходит итерация по списку сотрудников с помощью этого объекта.
 */
class MainIterator
{
    public function index()
    {
        // Создаем список сотрудников
        $employeeList = new ListClass();

        // Добавляем сотрудников в список
        $employeeList->addItem(new Employee('John'));
        $employeeList->addItem(new Employee('Alice'));
        $employeeList->addItem(new Employee('Bob'));

        // Создаем объект для печати информации о сотрудниках и указываем количество сотрудников для печати
        $printNEmployees = new PrintNEmployees($employeeList, 2);

        // Обход списка сотрудников и печать информации о них
        $printNEmployees->traverse();
    }
}
