<?php

namespace App\Http\Controllers\PHP8\P313Singleton;

/**
 * Паттерн Singleton - это порождающий паттерн проектирования, который обеспечивает создание только одного экземпляра
 * класса и предоставляет глобальную точку доступа к этому экземпляру. Это полезно, когда требуется, чтобы у класса был
 * только один объект, общий для всей системы.
 *
 * В разработке ювелирного интернет-магазина на Laravel, паттерн Singleton может быть полезен в следующих логических
 * случаях:
 *
 * Управление соединением с базой данных: Вы можете использовать Singleton для создания и управления одним единственным
 * объектом базы данных, чтобы избежать избыточных соединений с базой данных и обеспечить единообразное взаимодействие
 * с данными.
 *
 * Хранение настроек и конфигурации: Singleton может быть использован для хранения настроек и конфигурационных данных
 * магазина, таких как настройки безопасности, параметры доставки, и другие общие параметры.
 *
 * Управление сессиями и авторизацией: Singleton может использоваться для создания и управления сессиями пользователей
 * и авторизацией, чтобы обеспечить безопасное и единообразное взаимодействие пользователей с системой.
 *
 * Логирование и мониторинг: Singleton может служить для создания и управления механизмами логирования и мониторинга
 * системы, что обеспечит централизованный доступ к журналам событий и данным мониторинга.
 *
 * Управление кэшем и кэшированием: Если ваш магазин использует кэширование данных, Singleton может обеспечить
 * глобальный доступ к объекту управления кэшем, позволяя эффективно кэшировать и извлекать данные.
 *
 * Глобальный доступ к сервисам и ресурсам: Singleton может использоваться для предоставления глобального доступа к
 * сервисам и ресурсам, таким как обработка изображений, отправка уведомлений, и другим общим функциональностям.
 *
 * Паттерн Singleton обеспечивает гарантированную наличность только одного экземпляра объекта и глобальный доступ к
 * нему, что может быть полезным для управления общими ресурсами и сервисами в интернет-магазине. Однако, его следует
 * использовать осторожно, чтобы избежать чрезмерной глобальности и зависимостей.
 */
class ProgramP313Singleton
{
    public function index() {
        // Получение экземпляра класса Preferences (настроек) с использованием Singleton.
        $pref = Preferences::getInstance();

        // Установка свойства "name" в экземпляре Preferences.
        $pref->setProperty("name", "Серега");

        // Удаление ссылки на экземпляр Preferences.
        unset($pref);

        // Демонстрация, что значение не потеряно:
        // Получение нового экземпляра Preferences, который также содержит установленное свойство "name".
        $pref2 = Preferences::getInstance();

        // Вывод значения свойства "name" из нового экземпляра.
        print $pref2->getProperty("name") . "<br />";
    }
}
