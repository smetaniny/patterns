<?php

namespace App\Http\Controllers\PHP8\P292Strategy;

use Smetaniny\LaravelImage\Facades\SMImage;

/**
 * Паттерн "Стратегия" (Strategy) - это поведенческий паттерн проектирования, который позволяет определить семейство
 * алгоритмов, инкапсулировать каждый из них и обеспечить их взаимозаменяемость. Этот паттерн позволяет клиентскому
 * коду выбирать стратегию выполнения операции динамически, не привязываясь к конкретной реализации.
 *
 * В разработке ювелирного интернет-магазина на Laravel, паттерн "Стратегия" может быть полезен в следующих логических
 * случаях:
 *
 * Расчет стоимости доставки: Если ваш интернет-магазин предоставляет различные методы доставки (например, обычная
 * доставка, экспресс-доставка, самовывоз), каждый из них может иметь свой собственный алгоритм расчета стоимости
 * доставки. Стратегия позволяет инкапсулировать каждый алгоритм расчета в отдельном классе и динамически выбирать
 * подходящий алгоритм в зависимости от выбора клиента.
 *
 * Скидки и акции: Если ваш магазин предлагает различные виды скидок и акций (например, скидка на ювелирные изделия
 * определенного вида, сезонные акции), каждая скидка или акция может быть реализована как стратегия. Клиентский код
 * может выбирать активную стратегию для применения скидки к заказу.
 *
 * Фильтрация и сортировка товаров: Если ваш магазин предоставляет возможность фильтрации и сортировки товаров на
 * сайте, каждый метод фильтрации или сортировки может быть реализован как отдельная стратегия. Это позволяет клиентам
 * выбирать различные способы отображения товаров.
 *
 * Расчет налогов и валюты: Если ваш магазин работает с международными клиентами, то стратегии могут использоваться для
 * расчета налогов и конвертации валют в зависимости от местоположения и национальных настроек клиента.
 *
 * Обработка платежей: Обработка платежей в интернет-магазине может варьироваться в зависимости от выбранного
 * платежного метода. Стратегия может использоваться для инкапсуляции логики обработки платежей для различных платежных
 * провайдеров.
 *
 * Кастомизация заказов: Если ваш магазин позволяет клиентам создавать кастомные заказы (например, кастомизация
 * ювелирных изделий), каждая конфигурация заказа может быть реализована как стратегия.
 *
 * Паттерн "Стратегия" упрощает добавление новых алгоритмов и их использование без изменения существующего клиентского
 * кода. Это позволяет вашему интернет-магазину быть более гибким и легче адаптироваться к изменяющимся потребностям
 * клиентов.
 */
class ProgramP292Strategy
{
    /**
     * @throws \ImagickException
     */
    public function index()
    {
//        $img = SMImage::make('D:/file.jpg')
//            ->optimize()
//            ->save();
        // Создание объекта изображения на основе данных, предоставленных UploadedFile.
        $image = SMImage::make("D:/file.jpg");
        $image->resize(500, null);
        $image->crop(300, 200, 50, 50);
        $image->encode('jpg', 80);
        $image->mirror('horizontal');
        $image->blur(5);
        $image->brightness(20);
        $image->contrast(-10);
        $image->grayscale();
        $image->sharpen(5);
        $text = 'Пример текста';
        $font = public_path('/Montserrat-Black.ttf');
        $image->textOverlay($text, 300, 300, $font, 44, '#FF0000');
        $watermarkPath = public_path('/watermark.png');
        $image->watermark($watermarkPath, 50, 100, 90);
        $image->backup();
        $image->reset();
        $response = $image->response();
        $stream = $image->stream();
        $image->save();

        dd($image->getSavePath(), $response, $stream );

        $lessons[] = new Seminar(4, new TimedCostStrategy(), "Цветы");
        $lessons[] = new Lecture(7, new FixedCostStrategy(), "Фамин Иван Иваныч");
        foreach ($lessons as $lesson) {
            echo "Оплата за занятие {$lesson->cost()}. <br/>";
            echo "Тип оплаты: {$lesson->chargeType()} <br/>";
            echo "Длительность урока: {$lesson->getDuration()} <br/>";

            // Добавляем этот блок для семинаров
            if ($lesson instanceof Seminar) {
                echo "Тема семинара: {$lesson->getTopic()} <br/>";
            }

            if ($lesson instanceof Lecture) {
                echo "Лектор: {$lesson->getRector()} <br/>";
            }
            echo "<hr/><br />";
        }
    }
}
