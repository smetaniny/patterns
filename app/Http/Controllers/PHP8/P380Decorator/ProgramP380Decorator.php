<?php

namespace App\Http\Controllers\PHP8\P380Decorator;

/**
 * Паттерн Decorator (Декоратор) - это структурный шаблон проектирования, который позволяет динамически добавлять новые
 * функциональные возможности объекту, не изменяя его структуру. Этот паттерн применяется, когда требуется расширить
 * функциональность объекта, но наследование не является удовлетворительным вариантом, например, из-за большого числа
 * возможных комбинаций функциональных расширений.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel, паттерн Decorator может использоваться в следующих
 * логических случаях:
 *
 * Декорация товаров: Вы можете использовать Decorator для добавления дополнительных атрибутов и функциональных
 * возможностей к товарам в вашем магазине. Например, для ювелирных изделий, вы можете создать декораторы, добавляющие
 * информацию о весе, материале, камнях и других характеристиках товаров.
 *
 * Расчет цены: Для ювелирных изделий цена может зависеть от различных факторов, таких как вес, качество камней, дизайн
 * и другие параметры. Decorator может быть использован для расширения классов товаров и применения дополнительных
 * правил расчета цены.
 *
 * Скидки и акции: Если ваш интернет-магазин предоставляет скидки и акции, Decorator может быть использован для
 * добавления скидок к товарам без изменения исходного класса товара. Например, можно создать декоратор, который
 * предоставляет скидку на товар.
 *
 * Логирование и аудит: Decorator может быть использован для добавления логирования или аудита операций, связанных с
 * товарами. Это позволяет отслеживать историю изменений и операций с товарами.
 *
 * Локализация и интернационализация: Для интернет-магазина, работающего в разных странах, Decorator может быть
 * использован для добавления функциональности локализации и интернационализации товаров, например, перевода описаний и
 * названий товаров.
 *
 * Использование паттерна Decorator в Laravel может быть реализовано с помощью создания классов-декораторов, которые
 * расширяют базовые классы товаров или сервисов, предоставляя дополнительные функции. Laravel также предоставляет
 * возможности для создания собственных сервис-провайдеров, что может быть полезно для применения декораторов к
 * различным компонентам вашего интернет-магазина.
 */
class ProgramP380Decorator
{
    public function index()
    {
        // Создание экземпляра класса Plains
        $tile = new Plains();

        // Выводим богатство (первоначальное значение) плоской местности
        print $tile->getWealthFactor() . '<br />';

        // Создание экземпляра класса DiamondDecorator, который оборачивает плоскую местность
        $tile = new DiamondDecorator(new Plains());

        // Выводим богатство местности после применения DiamondDecorator
        print $tile->getWealthFactor() . '<br />';

        // Создание экземпляра класса PollutionDecorator, который оборачивает DiamondDecorator
        $tile = new PollutionDecorator(new DiamondDecorator(new Plains()));

        // Выводим богатство местности после применения PollutionDecorator
        print $tile->getWealthFactor() . '<br />';
    }
}
