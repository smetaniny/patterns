<?php

namespace App\Http\Controllers\PHP8\P436Command;

/**
 * Паттерн Command (Команда) - это поведенческий шаблон проектирования, который инкапсулирует запрос в виде объекта,
 * позволяя передавать запросы в виде объектов, а не как непосредственные вызовы методов. Это позволяет абстрагировать
 * клиентский код от деталей выполнения команды, а также поддерживать отмену и повторение операций.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel, паттерн Command может быть использован в следующих
 * логических случаях:
 *
 * Управление заказами: Каждая операция, связанная с заказами, такая как создание заказа, добавление товара в корзину,
 * обработка заказа или отмена заказа, может быть представлена в виде команды. Это позволит легко управлять операциями
 * с заказами и поддерживать историю выполненных действий.
 *
 * Управление инвентарем: Паттерн Command может использоваться для управления инвентарем товаров. Например, команда
 * "увеличить количество товара" или "уменьшить количество товара" может быть инкапсулирована в объекты команды, что
 * облегчит управление наличием товаров.
 *
 * Управление скидками и акциями: Команды могут быть использованы для управления скидками и акциями. Например,
 * создание, применение или отмена скидок может быть представлено в виде команд, что позволит легко манипулировать
 * акциями и следить за их состоянием.
 *
 * Управление доставкой и оплатой: Операции, связанные с доставкой и оплатой заказов, могут быть представлены как
 * команды. Например, команда "подтвердить заказ" может инициировать процесс оплаты и доставки.
 *
 * История действий и аудит: Использование паттерна Command позволяет легко сохранять историю выполненных операций, что
 * полезно для аудита и отслеживания действий в системе.
 *
 * В Laravel, реализация паттерна Command может быть осуществлена с использованием функциональности "Artisan Commands,"
 * что предоставляет удобный способ создания и выполнения команд в фреймворке. Этот паттерн также совместим с другими
 * шаблонами проектирования, такими как паттерн Observer, что позволяет создавать более гибкие и масштабируемые системы
 * управления заказами и другими аспектами интернет-магазина.
 */
class ProgramP436Command
{
    public function index()
    {
        // Создаем экземпляр контроллера
        $controller = new Controller();

        // Получаем контекст из контроллера
        $context = $controller->getContext();

        // Добавляем параметры к контексту
        $context->addParam('action', 'login');
        $context->addParam('username', 'Иван ');
        $context->addParam('pass', 'tiddles');

        // Обрабатываем запрос с помощью контроллера (паттерн "Команда")
        $controller->process();

        // Выводим сообщение об ошибке из контекста
        print $context->getError();
    }
}
