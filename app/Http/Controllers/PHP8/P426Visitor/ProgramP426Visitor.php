<?php

namespace App\Http\Controllers\PHP8\P426Visitor;

/**
 * Паттерн Visitor (Посетитель) - это поведенческий шаблон проектирования, который позволяет добавлять новые операции к
 * объектам без изменения их классов. Он предоставляет способ выполнения операций над элементами объектов, не раскрывая
 * внутренней структуры этих объектов.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel, паттерн Visitor может быть несколько менее
 * распространенным, но он может быть полезен в следующих логических случаях:
 *
 * Расчет стоимости заказов: Если ваш интернет-магазин предоставляет различные опции заказа и спецификации (например,
 * выбор материала, добавление камней и других элементов в ювелирных изделиях), вы можете использовать паттерн Visitor
 * для выполнения расчета общей стоимости заказа на основе выбранных опций. Каждая опция может быть представлена как
 * "посетитель," который применяет свои правила расчета к заказу.
 *
 * Генерация отчетов и аналитики: Если требуется генерировать разнообразные отчеты и аналитические данные, Visitor
 * может быть использован для обхода различных данных и выполнения специфических операций для анализа и подготовки
 * отчетов.
 *
 * Обработка заказов и доставки: Паттерн Visitor может быть применен для обработки заказов и доставки товаров.
 * Например, разные типы доставки могут быть представлены как "посетители," которые определяют способ доставки и расчет
 * стоимости в зависимости от местоположения клиента.
 *
 * Управление и обновление инвентаря: Если ваш магазин содержит сложные товары, такие как сборки из различных
 * компонентов, Visitor может использоваться для управления и обновления инвентаря, включая учет наличия компонентов и
 * вычисление доступного товара на основе компонентов.
 *
 * Однако стоит отметить, что паттерн Visitor может быть сложным в реализации и требует тщательного проектирования. В
 * Laravel, его использование может потребовать создания специальных классов "посетителей" и механизмов для связи и
 * выполнения операций над объектами. Поэтому, прежде чем использовать этот паттерн, необходимо тщательно оценить,
 * насколько он подходит к конкретным задачам разработки вашего интернет-магазина и какие преимущества он может
 * предоставить.
 */
class ProgramP426Visitor
{
    public function index()
    {
        // Создаем экземпляр главной армии
        $main_army = new \App\Http\Controllers\PHP8\P426Visitor\Army();

        // Добавляем юнитов в главную армию (композит)
        $main_army->addUnit(new \App\Http\Controllers\PHP8\P426Visitor\Archer());
        $main_army->addUnit(new \App\Http\Controllers\PHP8\P426Visitor\LaserCannonUnit());

        // Создаем экземпляр TextDumpArmyVisitor
        $textdump = new TextDumpArmyVisitor();

        // Применяем посетителя к главной армии
        $main_army->accept($textdump);

        // Выводим текстовое представление армии, сгенерированное посетителем
        print $textdump->getText();
    }
}
