<?php

namespace App\Http\Controllers\PHP8\P319FactoryMethod;

/**
 * Паттерн "Фабричный метод" (Factory Method) является порождающим паттерном проектирования, который предоставляет
 * интерфейс для создания объектов, но оставляет решение о конкретных классах объектов для подклассов. Этот паттерн
 * делегирует создание объектов подклассам, что позволяет клиентскому коду работать с абстрактными типами, не завися от
 * конкретных классов.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel паттерн "Фабричный метод" может быть использован в
 * следующих логических случаях:
 *
 * Создание ювелирных изделий разных категорий: Если ваш магазин предлагает различные категории ювелирных изделий,
 * такие как кольца, ожерелья, часы и другие, вы можете использовать фабричные методы для создания объектов,
 * представляющих разные категории изделий. Каждая фабрика будет отвечать за создание конкретной категории изделий.
 *
 * Интеграция с различными поставщиками: Если ваш магазин сотрудничает с разными поставщиками ювелирных изделий, каждый
 * из которых предоставляет свои уникальные продукты, фабричные методы могут создать абстракцию для создания продуктов
 * от разных поставщиков. Это упростит интеграцию с разными поставщиками и управление их продуктами.
 *
 * Поддержка разных стандартов и регионов: Если ваш магазин работает в разных регионах, где действуют различные
 * стандарты и требования к ювелирным изделиям, фабричные методы могут создать абстракции для создания продуктов,
 * соответствующих стандартам конкретного региона.
 *
 * Управление внешними интеграциями: Если ваш интернет-магазин интегрируется с различными сторонними системами, такими
 * как платежные шлюзы, системы учета заказов и другие, фабричные методы могут создать абстракции для создания
 * объектов, связанных с этими интеграциями.
 *
 * Паттерн "Фабричный метод" позволяет легко создавать семейства объектов, которые соответствуют определенным
 * требованиям или контекстам, без необходимости знания конкретных классов. Это способствует гибкости и упрощает
 * поддержку и расширение вашего интернет-магазина ювелирных изделий.
 */
class ProgramP319FactoryMethod
{
    public function index()
    {
        // Создание менеджера коммуникации BloggsCommsManager.
        $mgr = new BloggsCommsManager();

        // Вывод заголовка, закодированного приглашения и футера для BloggsCommsManager.
        print $mgr->getHeaderText();
        print $mgr->getApptEncoder()->encode();
        print $mgr->getFooterText();

        // Создание менеджера коммуникации MegaCommsManager.
        $megaAppt = new MegaCommsManager();

        // Вывод заголовка, закодированного приглашения и футера для MegaCommsManager.
        print $megaAppt->getHeaderText();
        print $megaAppt->getApptEncoder()->encode();
        print $megaAppt->getFooterText();
    }
}
