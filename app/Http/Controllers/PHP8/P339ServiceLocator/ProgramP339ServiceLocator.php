<?php

namespace App\Http\Controllers\PHP8\P339ServiceLocator;

use App\Models\User;

/**
 * Паттерн Service Locator (Локатор Сервисов) - это паттерн проектирования, который предоставляет централизованный
 * механизм для регистрации, поиска и получения сервисов (компонентов) в приложении. Этот паттерн позволяет управлять
 * зависимостями и обеспечивает возможность замены сервисов без изменения кода, который их использует.
 *
 * Service Locator может быть полезен при разработке ювелирного интернет-магазина на Laravel в следующих логических
 * случаях:
 *
 * Управление зависимостями: В ювелирном интернет-магазине могут быть множество зависимостей, такие как сервисы для
 * обработки заказов, управления инвентарем, интеграции с платежными шлюзами и т. д. Service Locator может
 * использоваться для управления этими зависимостями и обеспечения доступа к ним из разных частей приложения.
 *
 * Поддержка разных конфигураций: Интернет-магазин может работать в разных режимах или конфигурациях, например, для
 * разных регионов или типов продуктов. Service Locator позволяет динамически подгружать и переключать настройки и
 * сервисы в зависимости от текущей конфигурации.
 *
 * Тестирование и замена сервисов: При разработке и тестировании приложения важно иметь возможность подменять сервисы
 * фиктивными или моковскими объектами. Service Locator упрощает эту задачу, так как вы можете заменить реальные
 * сервисы тестовыми внутри локатора.
 *
 * Уменьшение связанности: Service Locator позволяет уменьшить связанность компонентов приложения, так как код,
 * использующий сервисы, не должен знать о том, как их создавать и где они находятся.
 *
 * Легкость замены сервисов: При необходимости заменить один сервис другим (например, сменить поставщика услуг), это
 * можно сделать централизованно в Service Locator, минимизируя изменения в коде приложения.
 *
 * Важно использовать паттерн Service Locator осторожно, так как он может скрыть зависимости и сделать код менее
 * понятным. В современных приложениях, особенно на Laravel, часто рекомендуется использовать инъекцию зависимостей
 * (Dependency Injection) для управления зависимостями. Service Locator следует использовать только тогда, когда это
 * действительно оправдано и приносит пользу в конкретной ситуации.
 */
class ProgramP339ServiceLocator
{
    public function index()
    {
        // Получаем экземпляр конфигурации из AppConfig с помощью Service Locator.
        $commsMgr = AppConfig::getInstance()->getCommsManager();

        // Выводим результат кодирования данных, используя полученный CommsManager.
        print $commsMgr->getApptEncoder()->encode();
    }
}
