<?php

namespace App\Http\Controllers\PHP8\P365Composite;

/**
 * Паттерн Composite (Компоновщик) - это структурный шаблон проектирования, который позволяет объединять объекты в
 * древовидные структуры для представления их как одиночные объекты. Он позволяет клиентам обращаться к отдельным
 * объектам и их композитам (составным объектам) одинаковым образом, что упрощает работу с древовидными структурами.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel, паттерн Composite может использоваться в следующих
 * логических случаях:
 *
 * Категории и подкатегории товаров: В интернет-магазине у вас может быть древовидная структура категорий и
 * подкатегорий для организации товаров. Паттерн Composite позволяет представить категории и подкатегории как
 * композиты, а сами товары как листья в этой структуре. Это упрощает навигацию и манипуляции с категориями, а также
 * позволяет клиентскому коду работать с ними единообразно.
 *
 * Фильтры и фильтры-композиты: Если ваш магазин предоставляет фильтры для поиска товаров, паттерн Composite может
 * использоваться для представления фильтров и их комбинаций (например, фильтр по цене и бренду как один
 * фильтр-композит). Это обеспечивает удобство для клиентов при применении фильтров.
 *
 * Оформление заказа: Когда клиент оформляет заказ, он может добавлять как отдельные товары, так и наборы товаров
 * (например, комплекты ювелирных изделий). Паттерн Composite может использоваться для представления корзины или
 * заказа, где как отдельные товары, так и комплекты представлены как композиты.
 *
 * Управление страницами и контентом: В случае, если ваш интернет-магазин содержит множество страниц с различным
 * контентом, вы можете использовать паттерн Composite для представления страниц и их составных элементов (текст,
 * изображения, видео и т. д.).
 *
 * Паттерн Composite помогает абстрагировать клиентский код от деталей управления составными объектами и упрощает
 * манипуляции с древовидными структурами. В Laravel вы можете реализовать этот паттерн с помощью собственных классов и
 * отношений в Eloquent, что позволяет эффективно управлять древовидными структурами данных.
 */
class ProgramP365Composite
{
    public function index()
    {
        // Метод index, который будет вызываться при обращении к этому контроллеру

        // Создание армии
        $main_army = new Army();

        // Добавление юнитов в главную армию (композит)
        $main_army->addUnit(new Archer());
        $main_army->addUnit(new LaserCannonUnit());

        // Создание новой армии
        $sub_army = new Army();

        // Добавление юнитов во вторую армию (композит)
        $sub_army->addUnit(new Archer());
        $sub_army->addUnit(new Archer());
        $sub_army->addUnit(new Archer());

        // Добавление второй армии в первую (создание иерархии)
        $main_army->addUnit($sub_army);

        // Вычисление суммарной атакующей силы армии (рекурсивно через композит)
        print "Атака с силой: {$main_army->bombardStrength()} <br />";
    }
}
