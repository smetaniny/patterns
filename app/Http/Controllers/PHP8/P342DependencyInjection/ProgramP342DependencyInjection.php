<?php

namespace App\Http\Controllers\PHP8\P342DependencyInjection;

/**
 * Паттерн Dependency Injection (внедрение зависимостей) - это метод внедрения объектов или компонентов, от которых
 * зависит класс, вместо того, чтобы создавать их внутри класса. Это делает класс более независимым, более гибким и
 * более легким для тестирования, так как зависимости могут быть подменены при необходимости. Dependency
 * Injection - это важный аспект принципа инверсии управления (Inversion of Control), который способствует созданию
 * более модульных и поддерживаемых приложений.
 *
 * В контексте разработки ювелирного интернет-магазина на Laravel, Dependency Injection может использоваться в
 * следующих логических случаях:
 *
 * Контроллеры и сервисы: В Laravel, контроллеры и сервисы играют ключевую роль. Вы можете использовать Dependency
 * Injection, чтобы внедрять зависимости, такие как сервисы для обработки заказов, управления пользователями, работу с
 * продуктами и другие, прямо в ваши контроллеры и сервисы. Это делает код более чистым и уменьшает связанность.
 *
 * Зависимости для представлений: Если вам необходимо передавать данные в представления (шаблоны), вы можете
 * использовать Dependency Injection для внедрения необходимых объектов и данных, таких как объекты продуктов или
 * заказов, напрямую в представления. Это делает представления более гибкими и позволяет избегать жесткой связи с
 * данными.
 *
 * Работа с базой данных: Вам может понадобиться внедрять зависимости для работы с базой данных, такие как репозитории,
 * объекты моделей или объекты запросов, в ваши сервисы или контроллеры. Это позволяет избегать жесткой связи с
 * конкретной реализацией базы данных и обеспечивает легкость замены или тестирования.
 *
 * Тестирование: Использование Dependency Injection упрощает тестирование, так как вы можете внедрять фейковые или
 * мок-объекты вместо реальных зависимостей при написании юнит-тестов. Это позволяет вам проверять функциональность
 * вашего кода без фактического взаимодействия с реальными службами и данными.
 *
 * Laravel предоставляет множество средств для внедрения зависимостей, включая механизмы контейнера внедрения
 * зависимостей (Dependency Injection Container) и инструменты для регистрации и разрешения зависимостей. Все это
 * делает использование Dependency Injection в Laravel относительно простым и мощным средством для управления
 * зависимостями в вашем интернет-магазине.
 */
class ProgramP342DependencyInjection
{
    public function index()
    {
        // Создаем экземпляр класса ObjectAssembler, передавая путь к XML-файлу
        $assembler = new ObjectAssembler(base_path("App/Http/Controllers/PHP8/P342DependencyInjection/objects.xml"));

        // Получаем экземпляр класса ApptEncoder из ObjectAssembler
        $encoder = $assembler->getComponent(ApptEncoder::class);

        // Создаем экземпляр класса AppointmentMaker, передавая ему $encoder
        $apptmaker = new AppointmentMaker($encoder);

        // Вызываем метод makeAppointment и сохраняем результат в переменной $out
        $out = $apptmaker->makeAppointment();

        // Выводим результат на экран
        print $out;

        // Получаем экземпляр класса AppointmentMaker из ObjectAssembler
        $apptmaker = $assembler->getComponent(AppointmentMaker::class);

        // Вызываем метод makeAppointment и сохраняем результат в переменной $out
        $out = $apptmaker->makeAppointment();

        // Выводим результат на экран
        print $out;
    }
}
