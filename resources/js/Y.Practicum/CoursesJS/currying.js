/**
 * Каррирование
 * Функция configureDelivery принимает параметры, характеризующие настройки доставки,
 * и возвращает функцию, которая применяет эти параметры к выбранному способу доставки.
 *
 * @param deliveryType
 * @returns {function(*): function(*): function(*): void}
 */
function configureDelivery(deliveryType) {
    return function (cost) {
        cost *= 10; // Увеличиваем стоимость доставки в 10 раз (пример)
        return function (duration) {
            duration *= 2; // Удваиваем срок доставки (пример)
            return function (additionalInfo) {
                console.log(`Настройки для ${deliveryType} доставки:`);
                console.log(`- Стоимость: ${cost} рублей`);
                console.log(`- Срок доставки: ${duration} дней`);
                console.log(`- Дополнительная информация: ${additionalInfo}`);
            };
        };
    };
}

// Создаем каррированную функцию для настройки доставки по стандартной доставке.
const configureStandardDelivery = configureDelivery('стандартной');

// Создаем каррированную функцию для настройки доставки по экспресс доставке.
const configureExpressDelivery = configureDelivery('экспресс');

// Настройка способов доставки с использованием каррированных функций.
const standardDeliverySettings = configureStandardDelivery(150)(5)('Доставка в пределах города');
const expressDeliverySettings = configureExpressDelivery(500)(2)('Экспресс-доставка за город');

// Вывод результатов настройки доставки
console.log("Настройки стандартной доставки:");
console.log('standardDeliverySettings', standardDeliverySettings);

console.log("Настройки экспресс-доставки:");
console.log('expressDeliverySettings', expressDeliverySettings);

/*
Гибкость и читаемость кода: Каррирование позволяет создать функции с частичным применением аргументов.
Это делает код более гибким и понятным, так как каждая функция отвечает за одну четко определенную операцию
(например, настройку стоимости или срока доставки). В результате код становится легче читать и поддерживать.

Повторное использование: Каррированные функции можно использовать многократно с различными наборами аргументов.
Например, вы можете легко настроить различные типы доставки с разными стоимостями и сроками, не дублируя код.

Изоляция логики: Каждая функция возвращает другую функцию, что позволяет изолировать логику настройки доставки от
основного кода. Это улучшает модульность и управляемость приложения.

Читабельность и удобство отладки: Каждый шаг в цепочке каррирования четко выражает, что именно происходит с аргументами.
Это делает код более прозрачным и упрощает отладку, так как можно легко определить, где именно возникла проблема.
 */
